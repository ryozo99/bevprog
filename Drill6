// Drill / 6

#include "std_lib_facilities.h"


class Token {
public:
    char kind;        
    double value;     
    Token(char ch)   
        :kind(ch), value(0) { }    
    Token(char ch, double val)     // make a Token from a char and a double
        :kind(ch), value(val) { }
};


class Token_stream {
public: 
    Token_stream();   // make a Token_stream that reads from cin
    Token get();      
    void putback(Token t);    
private:
    bool full;       
    Token buffer;     
    };  



// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
:full(false), buffer(0)    // no Token in buffer
{
}


void Token_stream::putback(Token t)
{
    if (full) error("putback() into a full buffer");
    buffer = t;       
    full = true;      
}



Token Token_stream::get()
{
    if (full) {      
        full=false;
        return buffer;
    } 

    char ch;
    cin >> ch;    

    switch (ch) {
    case '=':    
    case 'x':   
    case '(': case ')': case '+': case '-': case '*': case '/': 
        return Token(ch);        // let each character represent itself
    case '.':
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':
        {    
            cin.putback(ch);        
            double val;
            cin >> val;              
            return Token('8',val);   
        }
    default:
        error("Bad token");
    }
}


Token_stream ts;        // provides get() and putback() 



double expression();    // declaration so that primary() can call expression()



// deal with numbers and parentheses
double primary()
{
    Token t = ts.get();
    switch (t.kind) {
    case '(':    // handle '(' expression ')'
        {    
            double d = expression();
            t = ts.get();
            if (t.kind != ')') error("')' expected");
            return d;
        }
    case '8':           
        return t.value;  
    default:
        error("primary expected");
    }
}



// deal with *, /, and %
double term()
{
    double left = primary();
    Token t = ts.get();     

    while(true) {
        switch (t.kind) {
        case '*':
            {
                left *= primary();
                t = ts.get();
                break;
            }
        case '/':
            {    
                double d = primary();
                if (d == 0) error("divide by zero");
                left /= d; 
                t = ts.get();
                break;
            }
        default: 
            ts.putback(t);     
            return left;
        }
    }
}



// deal with + and -
double expression()
{
    double left = term();     
    Token t = ts.get();        

    while(true) {    
        switch(t.kind) {
        case '+':
            left += term();   
            t = ts.get();
            break;
        case '-':
            left -= term();    
            t = ts.get();
            break;
        default: 
            ts.putback(t);    
            return left;       
        }
    }
}



int main()
try
{
    cout << "Welcome to our simple calculator.\nPlease enter expressions using floating-point numbers.\n"; //4. Feladat
    cout << "You can use +,-,*,/ operators.\nPress = to print the result, or press x to quit.\n"; //5. Feladat
    while (cin) {
        Token t = ts.get();
        double val;
        if (t.kind == 'x') break; // 'x' for quit 2. Feladat
        //if (t.kind == 'q') break; // 'q' for quit
        if (t.kind == '=')        // '=' for "print now" 3. Feladat
        //if (t.kind == ';')        // ';' for "print now"
            cout << "=" << val << '\n';
        else
            ts.putback(t);
        val = expression();
    }
	keep_window_open();
}
catch (exception& e) {
    cerr << "error: " << e.what() << '\n'; 
	keep_window_open();
    return 1;
}
catch (...) {
    cerr << "Oops: unknown exception!\n"; 
	keep_window_open();
    return 2;
}
